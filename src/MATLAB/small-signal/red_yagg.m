function [Y11,Y12,Y21,Y22,rec_V1,rec_V2,bus_order] =...
                          red_yagg(bus_sol)

% Syntax:  [red_Y,rec_V] = red_yagg(bus_sol)                                     
%          [Y11,Y12,Y21,Y22,rec_V1,rec_V2,bus_order] =...
%                          red_yagg(bus_sol)
% Purpose: form the reduced admittance matrix when the buses
%          are not connected -- for aggregation use
%
% Input:    bus_sol   - bus solution (generated by loadflow)
%
% Output:   red_Y     - reduced admittance matrix
%           rec_V     - voltage reconstruction matrix
%           Y11,Y12,Y21,Y22 - reduced admittance matrix for
%                         systems with non-conforming loads
%           rec_V1, rec_V2 - voltage reconstruction bus
%           bus_order - vector of bus number for recovering
%                       bus voltages
% See also: pst_var, loadflow, Ybus
%
% Calls: Ybus
%
% Call By:  

% (c) Copyright 1991 Joe H. Chow - All Rights Reserved
%
% History (in reverse chronological order)
%
% Version:   1.0
% Author:    Kwok W. Cheung, Joe H. Chow
% Date:      March 1991
%
% ***********************************************************
pst_var
jay = sqrt(-1);
swing_bus = 1;
gen_bus = 2;
load_bus = 3;

nbus = length(bus_sol(:,1));     % number of buses
[n,dummy] = size(mac_con);     % number of machine
m = nbus - n;     % total number of PQ buses

% build admittance matrix Y
Y_d = zeros(nbus);     % bus admittance matrix construction
% set up bus internal ordering
for i = 1:nbus
  bus_int(round(bus_sol(i,1))) = i;
end

%  Compute constant impedance component of non-conforming 
%    loads
if nargout > 2
  [nload dum] = size(load_con);
  j = bus_int(load_con(:,1));
  bus_sol(j,6) = (ones(nload,1)-load_con(:,2)-load_con(:,4) ...
                   ).*bus_sol(j,6);
  bus_sol(j,7) = (1-load_con(:,3)-load_con(:,5))...
                 .*bus_sol(j,7);
end
%  Add load components to Y matrix
V = bus_sol(:,2);      % magnitude of terminal voltage
Pl = bus_sol(:,6);     % real power of loads
Ql = bus_sol(:,7);     % reactive power of loads
%  Modify load component to take into account generation
%    buses with no generator data
gen_exist = zeros(max(bus_sol(:,1)),1);
for i=1:n              
  gen_exist(round(mac_con(i,2))) = i;
end
for i=1:nbus
  if gen_exist(round(bus_sol(i,1))) < 1
    Pl(i) = Pl(i) - bus_sol(i,4);  % convert generation 
    Ql(i) = Ql(i) - bus_sol(i,5);  %   to negative load
  end
end
yl = (Pl - jay*Ql)./V.^2;
Y_d = Y_d + diag(yl);

% extract appropriate xdprime and xdpprime from machine
%   data
for i = 1:n
  if mac_con(i,8) ~= 0
      xd(i) = mac_con(i,8)*basmva/mac_con(i,3);
    else
      xd(i) = mac_con(i,7)*basmva/mac_con(i,3);
  end
end
y = ones(n,1)./(jay*xd');     

Y_a = diag(y);        % generator admittance matrix
Y_b = zeros(n,nbus); 
for i = 1:n
  j = bus_int(round(mac_con(i,2)));  % bus connected to
                                     %  generator
  Y_b(i,j) = -y(i);
  Y_d(j,j) = Y_d(j,j) + y(i);
end
Y_c = -Y_b'; % ' is complex conjugate transpose

% set up internal machine list
macmax = max(mac_con(:,1));
mac_int = zeros(macmax,1);
for i = 1:n
  mac_int(round(mac_con(i,1))) = i;
end

% form the reduced admittance matrix
if nargout <= 2
    Y12 = -inv(Y_d)*Y_c;
    Y11 = Y_a + Y_b*Y12;
  else 
  % non-conforming load Y matrix reduction
  % make vector with non-conforming load buses first
    bus_order = zeros(nbus,1);
    bus_order(1:nload,1) = bus_int(load_con(:,1));
    bus_conf = zeros(nbus,1); % constant impedance bus
                              % indicator
    for i = 1:nload
       bus_conf(bus_order(i)) = 1;
    end
    k = nload;
    for i = 1:nbus
      if bus_conf(i) == 00
        k = k+1;
        bus_order(k) = i;
      end
    end
  % make permutation matrix
    P = zeros(nbus,nbus);
    for i = 1:nbus
      P(i,bus_order(i)) = 1;
    end
  % apply permutation matrix to Y matrix
    Y_b = Y_b*P'; Y_c = P*Y_c; Y_d = P*Y_d*P';  
  % partition Y matrices
    if nload ~= nbus   %  there are constant impedance load
                       %    buses to be eliminated
      Y_b1 = Y_b(:,1:nload); Y_b2 = Y_b(:,nload+1:nbus);
      Y_c1 = Y_c(1:nload,:); Y_c2 = Y_c(nload+1:nbus,:);
      Y_d1 = Y_d(1:nload,:); Y_d2 = Y_d(nload+1:nbus,:);
      Y_d11 = Y_d1(:,1:nload); Y_d12 = Y_d1(:,nload+1:nbus);
      Y_d21 = Y_d2(:,1:nload); Y_d22 = Y_d2(:,nload+1:nbus);
      yinv = inv(Y_d22);
      rec_V1 = -yinv*Y_c2; rec_V2 = -yinv*Y_d21;
      Y11 = Y_a + Y_b2*rec_V1; Y12 = Y_b1 + Y_b2*rec_V2;
      Y21 = Y_c1 + Y_d12*rec_V1; Y22 = Y_d11 + Y_d12*rec_V2;
     else
      Y11 = Y_a; Y12 = Y_b; Y21 = Y_c; Y22 = Y_d;
    end
end

return
